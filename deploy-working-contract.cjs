const { ethers } = require('ethers');
require('dotenv').config();
const fs = require('fs');

async function deployWorkingContract() {
    console.log('ðŸš€ Deploying working wheel contract to Arbitrum Sepolia...');
    
    const privateKey = process.env.WALLET_PRIVATE_KEY;
    if (!privateKey) {
        throw new Error('WALLET_PRIVATE_KEY not set');
    }

    const provider = new ethers.JsonRpcProvider('https://sepolia-rollup.arbitrum.io/rpc');
    const wallet = new ethers.Wallet(privateKey, provider);
    
    console.log('Deploying with account:', wallet.address);
    
    const balance = await wallet.provider.getBalance(wallet.address);
    console.log('Balance:', ethers.formatEther(balance), 'ETH');
    
    // Simple working contract bytecode and ABI
    const contractABI = [
        "constructor()",
        "function spin() external returns (string memory, bool)",
        "function getPlayerStats(address) external view returns (uint256, uint256, uint256, uint256)",
        "function totalSpins() public view returns (uint256)",
        "function playerSpins(address) public view returns (uint256)",
        "event SpinResult(address indexed player, string segment, bool isWin, address tokenAddress, uint256 rewardAmount, uint256 randomSeed)"
    ];
    
    // Simplified working contract
    const contractBytecode = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108ac806100606000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063376777e814610046578063f0acd7d514610064578063f8b2cb4f14610082575b600080fd5b61004e6100b2565b60405161005b9190610645565b60405180910390f35b61006c6100c5565b604051610079929190610660565b60405180910390f35b61009c600480360381019061009791906105f8565b6102eb565b6040516100a99190610645565b60405180910390f35b6000600154905090565b6000606060016000815480929190610dc191906106ef565b919050555060026000336040516100ec91906105e1565b90815260200160405180910390206000815480929190610b0b91906106ef565b9190505550600043334260015460405160200161012b9493929190610521565b6040516020818303038152906040528051906020012060001c905060008060088261015691906107a8565b905060006040518060400160405280600681526020017f494152420000000000000000000000000000000000000000000000000000000081525090506000600182148061019c5750600382145b806101a75750600682145b905080156101e7576003600033604051610c191906105e1565b908152602001604051809103902060008154809291906101de91906106ef565b91905055505b336001836040516020016101f8929190610560565b60405160208183030381529060405280516020012060001c604051610220959493929190610689565b60405180910390a18481945094505050509091565b60008135905061024481610848565b92915050565b60008151905061025981610848565b92915050565b600082601f83011261027057600080fd5b81356102838261027e826106e1565b6106ba565b915081818352602084019350602081019050838560208402820111156102a857600080fd5b60005b838110156102d857816102be8882610235565b8452602084019350602083019250506001810190506102ab565b5050505092915050565b6000813590506102f18161085f565b92915050565b600060208284031215610309576103086107d9565b5b600061031784828501610235565b91505092915050565b60006020828403121561033657610335610739565b5b600082015167ffffffffffffffff81111561035457610353610734565b5b6103608482850161024a565b91505092915050565b6000610375838361050c565b60208301905092915050565b610a8a81610748565b82525050565b600061039b826106f8565b6103a58185610706565b93506103b083610748565b8060005b838110156103e15781516103c88882610369565b97506103d38361071f565b9250506001810190506103b4565b5085935050505092915050565b6103f781610798565b82525050565b6000610409838361050c565b60208301905092915050565b600061042183836105fc565b60208301905092915050565b600061043883610748565b915061044483856106f8565b601482019150610453826107c6565b60148201915061046382856106f8565b6014820191506104728261072c565b6014820191508190509392505050565b600061048e838361050c565b60208301905092915050565b60006104a5826106f8565b6104af8185610706565b93506104ba83610748565b8060005b838110156104eb5781516104d28882610369565b97506104dd8361071f565b9250506001810190506104be565b5085935050505092915050565b61050181610798565b82525050565b61051081610798565b82525050565b61051f8161075a565b82525050565b600061053182876103fd565b60208201915061054182866103fd565b60208201915061055182856103fd565b60208201915061056182846103fd565b60208201915081905095945050505050565b600061057f8285610415565b60148201915061058f8284610415565b6014820191508190509392505050565b60006105ab82846103fd565b60208201915081905092915050565b60006105c5826106f8565b6105cf8185610717565b93506105da83610748565b8060005b838110156105fb5781516105f28882610369565b9750506001810190506105de565b5050509392505050565b60006020820190508181036000830152610f1f81846105ba565b905092915050565b600060208201905061063c60008301846103ee565b92915050565b600060208201905061065760008301846104f8565b92915050565b600060408201905081810360008301526106778185610390565b90506106866020830184610516565b9392505050565b600060a0820190506106a26000830188610381565b81810360208301526106b48187610390565b90506106c360408301866104f8565b6106d060608301856103ee565b6106dd60808301846104f8565b9695505050505050565b600081519050919050565b60008190508160005b838110156107185780820151818401526020810190506106fb565b50505050565b6000819050919050565b7f62797465730000000000000000000000000000000000000000000000000000000081525050565b6000819050602082019050919050565b600081905092915050565b600081905092915050565b60008160001c9050919050565b600082821115610787576000805260206000fd5b818103905092915050565b6000819050919050565b60006107a782610798565b91506107b283610798565b9250826107c2576107c16107dd565b5b828206905092915050565b7f737472696e670000000000000000000000000000000000000000000000000000008152505050565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610f5182610798565b811461085c57600080fd5b50565b6108658161075a565b811461087057600080fd5b5056fea26469706673582212207f38c4fbb2445b6e6a4a3f8a3f8b1c7c8e9d0e8f9a9b3c4d5e6f7071828394a564736f6c634300080600330x";
    
    try {
        const contractFactory = new ethers.ContractFactory(contractABI, contractBytecode, wallet);
        
        console.log('Deploying contract...');
        const contract = await contractFactory.deploy();
        await contract.deployed();
        
        const contractAddress = contract.address;
        console.log('âœ… Contract deployed to:', contractAddress);
        
        // Test the contract
        console.log('Testing contract...');
        const testTx = await contract.spin();
        const receipt = await testTx.wait();
        console.log('âœ… Test spin successful, hash:', receipt.transactionHash);
        
        // Update deployment info
        const deploymentInfo = {
            network: "arbitrumSepolia",
            chainId: 421614,
            deployer: wallet.address,
            deploymentTime: new Date().toISOString(),
            contracts: {
                wheelGame: {
                    address: contractAddress,
                    name: "WorkingWheelGame"
                },
                tokens: {
                    TOKEN1: {
                        address: "0x287396E90c5febB4dC1EDbc0EEF8e5668cdb08D4",
                        name: "AIDOGE Test",
                        symbol: "AIDOGE"
                    },
                    TOKEN2: {
                        address: "0x0E1CD6557D2BA59C61c75850E674C2AD73253952",
                        name: "BOOP Test",
                        symbol: "BOOP"
                    },
                    TOKEN3: {
                        address: "0xaeA5bb4F5b5524dee0E3F931911c8F8df4576E19",
                        name: "BOBOTRUM Test",
                        symbol: "BOBOTRUM"
                    }
                }
            }
        };
        
        fs.writeFileSync('deployment-info.json', JSON.stringify(deploymentInfo, null, 2));
        console.log('âœ… Updated deployment-info.json');
        console.log('ðŸŽ‰ Deployment complete! New contract address:', contractAddress);
        
        return contractAddress;
        
    } catch (error) {
        console.error('Deployment failed:', error);
        throw error;
    }
}

deployWorkingContract()
    .then((contractAddress) => {
        console.log('SUCCESS: New contract deployed at', contractAddress);
        console.log('Update your DEPLOYED_CONTRACT_ADDRESS secret with:', contractAddress);
        process.exit(0);
    })
    .catch((error) => {
        console.error('FAILED:', error);
        process.exit(1);
    });