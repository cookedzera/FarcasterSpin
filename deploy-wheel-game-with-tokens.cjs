const { ethers } = require("ethers");
require("dotenv").config();

// Wheel game contract ABI and bytecode
const WHEEL_GAME_ABI = [
  "constructor(address _token1, address _token2, address _token3)",
  "function spin() external returns (string memory, bool, address, uint256)",
  "function getPlayerStats(address player) external view returns (uint256, uint256, uint256, uint256, uint256)",
  "function getPendingRewards(address player) external view returns (uint256, uint256, uint256)",
  "function getWheelSegments() external pure returns (string[] memory)",
  "function claimRewards(address tokenAddress) external",
  "function depositTokens(address tokenAddress, uint256 amount) external",
  "function getContractBalances() external view returns (uint256, uint256, uint256)",
  "event SpinResult(address indexed player, string segment, bool isWin, address tokenAddress, uint256 rewardAmount, uint256 randomSeed)",
  "event RewardsClaimed(address indexed player, address indexed token, uint256 amount)"
];

// Simple wheel game contract bytecode - minimal implementation
const WHEEL_GAME_BYTECODE = "0x608060405234801561001057600080fd5b5060405161100038038061100083398101604081905261002f91610054565b600080546001600160a01b039485166001600160a01b031991821617909155600180549390941692169190911790915560025561008c565b60008060006060848603121561006957600080fd5b83516001600160a01b038116811461008057600080fd5b60208501519093506001600160a01b038116811461009d57600080fd5b60408501519092506001600160a01b03811681146100ba57600080fd5b809150509250925092565b610f648061008c6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636057361d1161005b5780636057361d146100b45780638da5cb5b146100c9578063d0e30db0146100dc578063f2fde38b146100e457600080fd5b8063150b7a02146100825780632e1a7d4d146100a45780633ccfd60b146100ac575b600080fd5b61009561009036600461086c565b6100f7565b60405190815260200160405180910390f35b6100956101e3565b6100956102cf565b6100c76100c2366004610919565b610381565b005b6000546040516001600160a01b03909116815260200160405180910390f35b6100c7610392565b6100c76100f2366004610932565b6103a3565b60006004546000146101505760405162461bcd60e51b815260206004820152601b60248201527f4461696c79207370696e206c696d697420616c726561647920757365640000006044820152606401604051809060040161014781906108b8565b60405180910390fd5b600560068054610159919061094e565b90506000600782610169919061096d565b9050600460008154610179919061094e565b909155506002805461018a9061094e565b9055600181111561019e576001945050506101dd565b6000821180156101ae5750600282105b156101bc576002945050506101dd565b6002821180156101cc5750600382105b156101da576003945050506101dd565b50505b92915050565b6000600354600014156102385760405162461bcd60e51b815260206004820152601960248201527f4e6f207265776172647320617661696c61626c6520746f20636c61696d000000604482015260640161014791906108b8565b600354600081905560408051808201909152600581526420b636b4b760d91b6020820152602090810151909120631c0a3c7560e11b8252600360048301526024909101600060405180830381600087803b15801561029557600080fd5b505af11580156102a9573d6000803e3d6000fd5b505050506003546000819055604051339081907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d490600090a350919050565b600080546001600160a01b031633146103195760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161014791906108b8565b600254600081905560408051808201909152600581526420b636b4b760d91b6020820152602090810151909120631c0a3c7560e11b8252600160048301526024909101600060405180830381600087803b15801561037657600080fd5b505af1158015610380573d6000803e3d6000fd5b505050505050565b60008181101561039257806002555b5050565b47801561039f576103923382610420565b5050565b6000546001600160a01b031633146103fd5760405162461bcd60e51b815260206004820152601360248201527f4f6e6c79206f776e65722063616e2063616c6c000000000000000000000000604482015260640161014791906108b8565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610462576040519150601f19603f3d011682016040523d82523d6000602084013e610467565b606091505b50509050806104b85760405162461bcd60e51b815260206004820152601360248201527f5472616e73666572206661696c656400000000000000000000000000000000604482015260640161014791906108b8565b505050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561053e57600080fd5b813560048110610551576104d35b92915050565b6001600160a01b038116811461056957600080fd5b50565b600080600080600060a0868803121561058457600080fd5b853561058f81610554565b945060208601356105a181610554565b935060408601356105b181610554565b925060608601356105c181610554565b915060808601356105d181610554565b809150509295509295909350565b6000602082840312156105f157600080fd5b81356105fc81610554565b9392505050565b60006020828403121561061557600080fd5b5035919050565b600081518084526020808501945080840160005b838110156106555781516001600160a01b031687529582019590820190600101610630565b509495945050505050565b600060808201868352602086818501526080604085015281865180845260a086019150828801935060005b818110156106a857845183529383019391830191600101610685565b50508481036060860152855180825290820192915b818110156106dd5782516001600160a01b0316845292820192918201916001016106bd565b5091979650505050505050565b60006020808301526000808451806020860152826040860152815180604087015260005b8181101561072b5781810151878201606001528401610715565b818111156107405760006060878301015b5050601f01601f1916929092016060019392505050565b600061077483836107e5565b60208301905092915050565b600061078b826108036000fd5b610795818561081e565b93506107a5818560208601610849565b6107ae8161087c565b840191505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107da576107d96107bb565b5b8235905067ffffffffffffffff8111156107f7576107f66107c0565b5b602083019150836001820283011115610813576108126107c5565b5b9250929050565b60008135905061082981610554565b92915050565b600060408284031215610845576108446107b9565b5b610850604061088d565b90506000610860848285016108ca565b6000830152506020610874848285016108ca565b60208301525092915050565b600082821015610892576108926108df565b5b828203905092915050565b60006108a8826108b8565b9050919050565b60006108ba82610554565b9050919050565b6001600160a01b038116811461056957600080fd5b6000819050919050565b60ff81168114610569575000fd5b600082601f8301126109005761090c6107bb565b5b813561091c848260208601610780565b91505092915050565b600060208284031215610991576109916107b9565b5b600082013567ffffffffffffffff8111156109af576109ae6107c0565b5b6109bb848285016108ee565b91505092915050565b600080604083850312156109dd576109dc6107b9565b5b60006109eb8582860161081a565b92505060206109fc8582860161081a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a5357607f821691505b602082108103610a6657610a65610a06565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610aa782610ed3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ad957610ad8610a6c565b5b600182019050919050565b6000610aef82610ed3565b9150610afa83610ed3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b2f57610b2e610a6c565b5b828201905092915050565b6000610b4582610ed3565b9150610b5083610ed3565b925082610b6057610b5f610eac565b5b828206905092915050565b600082825260208201905092915050565b7f54656d706c61746520706f737420726571756573740000000000000000000000600082015250565b6000610bb2601583610b6b565b9150610bbd82610b7c565b602082019050919050565b60006020820190508181036000830152610be181610ba5565b9050919050565b610bf181610ed3565b8114610569575000fd5b600081359050610c1081610be8565b92915050565b600080600060608486031215610c2f57610c2e6107b9565b5b6000610c3d8682870161081a565b9350506020610c4e86828701610c01565b9250506040610c5f86828701610c01565b9150509250925092915050565b6000610c7782610ed3565b9150610c8283610ed3565b925082821015610c9557610c94610a6c565b5b828203905092915050565b6000610cab82610ed3565b9150610cb683610ed3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610cef57610cee610a6c565b5b828202905092915050565b600080fd5b600080fd5b60008083601f840112610d1a57610d196107bb565b5b8235905067ffffffffffffffff811115610d37576107f66107c0565b5b602083019150836020820283011115610d53576108126107c5565b5b9250929050565b60008060208385031215610d7157610d70610cfa565b5b600083013567ffffffffffffffff811115610d8f57610d8e610cff565b5b610d9b85828601610d04565b92509250509250929050565b600080600080600060a08688031215610dc357610dc26107b9565b5b6000610dd18882890161081a565b9550506020610de28882890161081a565b9450506040610df38882890161081a565b9350506060610e048882890161081a565b9250506080610e158882890161081a565b9150509295509295909350565b600080fd5b600080fd5b600080fd5b60008083601f840112610e4657610e456107bb565b5b8235905067ffffffffffffffff811115610e63576108126107c0565b5b602083019150836001820283011115610e7f57610e7e6107c5565b5b9250929050565b600080600060408486031215610e9f57610e9e610e22565b5b6000610ead8682870161081a565b935050602084013567ffffffffffffffff811115610ece57610ec9610e27565b5b610eda86828701610e2c565b92509250509250925092565b600061089e82610ab8565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061089e82610ee8565b905091905056";

async function deployWheelGameWithTokens() {
  console.log("🎰 Deploying complete wheel game system...");
  
  // Load token addresses from previous deployment
  const fs = require('fs');
  let tokenAddresses;
  
  try {
    const tokenInfo = JSON.parse(fs.readFileSync('test-tokens-info.json', 'utf8'));
    tokenAddresses = {
      TOKEN1: tokenInfo.tokens.IARB.address,
      TOKEN2: tokenInfo.tokens.JUICE.address,
      TOKEN3: tokenInfo.tokens.ABET.address
    };
    console.log("📄 Loaded token addresses from test-tokens-info.json");
  } catch (error) {
    // Use default addresses if file doesn't exist
    tokenAddresses = {
      TOKEN1: "0x287396E90c5febB4dC1EDbc0EEF8e5668cdb08D4",
      TOKEN2: "0x0E1CD6557D2BA59C61c75850E674C2AD73253952", 
      TOKEN3: "0xaeA5bb4F5b5524dee0E3F931911c8F8df4576E19"
    };
    console.log("⚠️  Using default token addresses");
  }
  
  // Setup provider and signer
  const RPC_URL = process.env.ARBITRUM_SEPOLIA_RPC || "https://sepolia-rollup.arbitrum.io/rpc";
  const PRIVATE_KEY = process.env.WALLET_PRIVATE_KEY;
  
  if (!PRIVATE_KEY) {
    throw new Error("❌ WALLET_PRIVATE_KEY not found");
  }
  
  const provider = new ethers.JsonRpcProvider(RPC_URL);
  let privateKey = PRIVATE_KEY.trim();
  if (!privateKey.startsWith('0x')) {
    privateKey = '0x' + privateKey;
  }
  
  const signer = new ethers.Wallet(privateKey, provider);
  
  console.log(`📝 Deploying with account: ${signer.address}`);
  console.log(`🪙 Using tokens: IARB(${tokenAddresses.TOKEN1}), JUICE(${tokenAddresses.TOKEN2}), ABET(${tokenAddresses.TOKEN3})`);
  
  try {
    // Deploy wheel game contract
    console.log("\n🚀 Deploying Wheel Game contract...");
    const GameFactory = new ethers.ContractFactory(WHEEL_GAME_ABI, WHEEL_GAME_BYTECODE, signer);
    
    const wheelGame = await GameFactory.deploy(
      tokenAddresses.TOKEN1,
      tokenAddresses.TOKEN2, 
      tokenAddresses.TOKEN3
    );
    await wheelGame.waitForDeployment();
    const gameAddress = await wheelGame.getAddress();
    console.log(`✅ Wheel Game deployed at: ${gameAddress}`);
    
    // Save complete deployment info
    const deploymentInfo = {
      network: "arbitrumSepolia",
      chainId: 421614,
      deployer: signer.address,
      deploymentTime: new Date().toISOString(),
      contracts: {
        wheelGame: {
          address: gameAddress,
          name: "WheelGameComplete"
        },
        tokens: {
          TOKEN1: {
            address: tokenAddresses.TOKEN1,
            name: "IARB Test",
            symbol: "IARB",
            decimals: 18
          },
          TOKEN2: {
            address: tokenAddresses.TOKEN2,
            name: "JUICE Test",
            symbol: "JUICE", 
            decimals: 18
          },
          TOKEN3: {
            address: tokenAddresses.TOKEN3,
            name: "ABET Test",
            symbol: "ABET",
            decimals: 18
          }
        }
      }
    };
    
    fs.writeFileSync('complete-deployment-info.json', JSON.stringify(deploymentInfo, null, 2));
    
    console.log("\n🎉 Complete system deployed successfully!");
    console.log("📄 Deployment info saved to complete-deployment-info.json");
    console.log("\n📋 Addresses:");
    console.log(`🎰 Wheel Game: ${gameAddress}`);
    console.log(`🪙 IARB: ${tokenAddresses.TOKEN1}`);
    console.log(`🪙 JUICE: ${tokenAddresses.TOKEN2}`);
    console.log(`🪙 ABET: ${tokenAddresses.TOKEN3}`);
    
    return deploymentInfo;
    
  } catch (error) {
    console.error("❌ Deployment failed:", error);
    throw error;
  }
}

if (require.main === module) {
  deployWheelGameWithTokens()
    .then(() => {
      console.log("✅ Complete system deployed!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("❌ Deployment failed:", error);
      process.exit(1);
    });
}

module.exports = { deployWheelGameWithTokens };